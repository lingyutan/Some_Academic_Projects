library(igraph)
g <- make_ring(10)#
g$layout <- layout_in_circle#
plot(g)
rglplot(g)
g <- make_lattice( c(5,5,5) )#
coords <- layout_with_fr(g, dim=3)#
rglplot(g, layout=coords)
seq(0.16, 0.2, 0.02)
seq(0.145, 0.155, 0.005)
install.packages("markovchain")
library(markovchain)
install.packages("diagram")
library(diagram)
?plot.mat
??plot.mat
a <- c("S", "I", "R")
?new
T <- matrix(c(0.5, 0.5, 0, 0, 0.5, 0.5, 0, 0, 1))
T <- matrix(c(0.5, 0.5, 0, 0, 0.5, 0.5, 0, 0, 1), nrow = 3, byrow = T, dimnames = list(a, a))
T
Z <- new("markovchain", states = a, byrow = T, transitionMatrix = T)
?markovchain
??markovchain
ls()
library(markovchain)
Z <- new("markovchain", states = a, byrow = T, transitionMatrix = T)
devtools::install_github('spedygiorgio/markovchain')
library(devtools)
install.packages("devtools")
library(devtools)
devtools::install_github('spedygiorgio/markovchain')
library(markovchain)
Z <- new("markovchain", states = a, byrow = T, transitionMatrix = T)
sqrt{(0.9-0.1)^2+(0.5-0.3)^2
sqrt()(0.9-0.1)^2+(0.5-0.3)^2)
sqrt((0.9-0.1)^2+(0.5-0.3)^2)
sqrt((0.1-0.9)^2+(0.5-0.3)^2)
sqrt((1.1-0.9)^2+(0.5-0.3)^2)
sqrt(2)
set.seed(129)#
g.test <- sample_grg(100, 0.15, coords = TRUE)
?sample_grg
library(igraph)
set.seed(129)#
g.test <- sample_grg(100, 0.15, coords = TRUE)
g.f.data <- as_data_frame(g.test, "both")
id <- which(g.f.data$edges$from <= num | g.f.data$edges$to <= num)#
id.i <- which(g.f.data$edges$from %in% I | g.f.data$edges$to %in% I)#
# tiff("fig_example.tiff", units="in", width=5, height=5, res=300)#
#
### Plot the connection considering boundary#
plot.new()#
plot.window(xlim=c(0,1), ylim=c(0,1), xaxs="i", yaxs="i")#
# points(g.f.data$vertices[1:num, ], pch = 21, bg = 'red', cex = 0.5)#
for (i in id)#
{#
  segments(x0 = g.f.data$vertices$x[g.f.data$edges$from[i]],#
           y0 = g.f.data$vertices$y[g.f.data$edges$from[i]],#
           x1 = g.f.data$vertices$x[g.f.data$edges$to[i]],#
           y1 = g.f.data$vertices$y[g.f.data$edges$to[i]],#
           lwd = 0.5, col = "#00FF00")#
}#
#
for (i in id.i)#
{#
  segments(x0 = g.f.data$vertices$x[g.f.data$edges$from[i]],#
           y0 = g.f.data$vertices$y[g.f.data$edges$from[i]],#
           x1 = g.f.data$vertices$x[g.f.data$edges$to[i]],#
           y1 = g.f.data$vertices$y[g.f.data$edges$to[i]],#
           lwd = 0.5, col = "#FF0000")#
}#
#
points(V(temp.g)$x[S], V(temp.g)$y[S], pch = 21, col = '#9900FF', bg = '#9900FF', cex = 0.5) # Blue#
points(V(temp.g)$x[I], V(temp.g)$y[I], pch = 21, col = '#FF0000', bg = '#FF0000', cex = 0.5) # Red#
points(V(temp.g)$x[R], V(temp.g)$y[R], pch = 21, col = '#7D7D7D', bg = '#7D7D7D', cex = 0.5) # Grey#
#
rect(-1, -1, 0, 2, col = "white", border = NA)#
rect(-1, 1, 2, 2, col = "white", border = NA)#
rect(1, -1, 2, 2, col = "white", border = NA)#
rect(-1, -1, 2, 0, col = "white", border = NA)#
axis(1)#
axis(2)#
# title(main="The Overall Title")#
# title(xlab="An x-axis label")#
# title(ylab="A y-axis label")#
box()
num = 100
id <- which(g.f.data$edges$from <= num | g.f.data$edges$to <= num)#
id.i <- which(g.f.data$edges$from %in% I | g.f.data$edges$to %in% I)#
# tiff("fig_example.tiff", units="in", width=5, height=5, res=300)#
#
### Plot the connection considering boundary#
plot.new()#
plot.window(xlim=c(0,1), ylim=c(0,1), xaxs="i", yaxs="i")#
# points(g.f.data$vertices[1:num, ], pch = 21, bg = 'red', cex = 0.5)#
for (i in id)#
{#
  segments(x0 = g.f.data$vertices$x[g.f.data$edges$from[i]],#
           y0 = g.f.data$vertices$y[g.f.data$edges$from[i]],#
           x1 = g.f.data$vertices$x[g.f.data$edges$to[i]],#
           y1 = g.f.data$vertices$y[g.f.data$edges$to[i]],#
           lwd = 0.5, col = "#00FF00")#
}#
#
for (i in id.i)#
{#
  segments(x0 = g.f.data$vertices$x[g.f.data$edges$from[i]],#
           y0 = g.f.data$vertices$y[g.f.data$edges$from[i]],#
           x1 = g.f.data$vertices$x[g.f.data$edges$to[i]],#
           y1 = g.f.data$vertices$y[g.f.data$edges$to[i]],#
           lwd = 0.5, col = "#FF0000")#
}#
#
points(V(temp.g)$x[S], V(temp.g)$y[S], pch = 21, col = '#9900FF', bg = '#9900FF', cex = 0.5) # Blue#
points(V(temp.g)$x[I], V(temp.g)$y[I], pch = 21, col = '#FF0000', bg = '#FF0000', cex = 0.5) # Red#
points(V(temp.g)$x[R], V(temp.g)$y[R], pch = 21, col = '#7D7D7D', bg = '#7D7D7D', cex = 0.5) # Grey#
#
rect(-1, -1, 0, 2, col = "white", border = NA)#
rect(-1, 1, 2, 2, col = "white", border = NA)#
rect(1, -1, 2, 2, col = "white", border = NA)#
rect(-1, -1, 2, 0, col = "white", border = NA)#
axis(1)#
axis(2)#
# title(main="The Overall Title")#
# title(xlab="An x-axis label")#
# title(ylab="A y-axis label")#
box()
0.01/(1+0.01-0.9)*100
?rnorm
tic()
sys.time
Sys.time()
a <- sys.time()
a <- Sys.time()
b <- Sys.time()
b-a
cat(b-a)
b-a
seq(0.135,0.135,0.005)
for (beta in c(1, 2, 3, 4, 6))#
{#
  print(beta)#
}
0.1+0.002*4
0.1+0.002*33
0.1+0.002*80
0.08+0.002*10
0.08+0.002*9
0.1+0.002*79
0.1+0.002*32
0.08+0.002*(10-1)
0.08+0.002*(30-1)
0.08+0.002*(63-1)
0.08+0.002*(6-1)
0.08+0.002*(26-1)
0.08+0.002*(47-1)
0.08+0.002*(4-1)
0.08+0.002*(23-1)
0.08+0.002*(38-1)
0.08+0.002*(3-1)
0.08+0.002*(20-1)
0.08+0.002*(30-1)
library(xlsx)
r1 <- read.xlsx("Data_Infect_Nomove_1.xlsx", 5, header = TRUE)
r1
r1$r
r2 <- read.xlsx("Data_Infect_Nomove_1.xlsx", 6, header = TRUE)
r3 <- read.xlsx("Data_Infect_Nomove_1.xlsx", 7, header = TRUE)
r4 <- read.xlsx("Data_Infect_Nomove_1.xlsx", 8, header = TRUE)
r5 <- read.xlsx("Data_Infect_Nomove_1.xlsx", 9, header = TRUE)
plot(r1)
plot(r1, type = "l")
lines(r2)
lines(r3)
lines(r4)
lines(r5)
{}
plot(r1, type = "l", xlim = c(0.08, 0.3))#
lines(r2)#
lines(r3)#
lines(r4)#
lines(r5)
