temp.g <- move.noedge(temp.g, j)
}
time.int <- time.int - runif(1, 0.8, 1.2)
}
pt.mtos <- choosep(pt.move, 1-p2)
pt.stom <- choosep(pt.still, p1)
pt.move <- pt.move[!pt.move %in% pt.mtos]
pt.move <- append(pt.move, pt.stom)
temp.g <- move(temp.g, pt.move, R)
### If only edges between S and I are needed
### Comment the above line and use the line below
# temp.g <- move.simple(temp.g, pt.move, S, I)
### New graph after points moving has been obtained ###
event <- sample(c(0, 1), size = 1, prob = c( a/(a+b), b/(a+b)))
### Infection
if(event == 0)
{
temp.infect.list <- ends(g0, E(g0)[.inc(I)])[!ends(g0, E(g0)[.inc(I)]) %in% I]
temp.infect.list <- temp.infect.list[!temp.infect.list %in% R]
if (length(temp.infect.list) == 1){
temp.infect <- temp.infect.list
}
else {
temp.infect <- sample(temp.infect.list, 1)
}
I <- append(I, temp.infect)
S <- S[S != temp.infect]
}
### Recovery
if(event == 1)
{
if (length(I) == 1) temp.recover = I
else temp.recover <- sample(I, 1)
I <- I[I != temp.recover]
R <- append(R, temp.recover)
}
# break
times = times + 1
}
num.I.overall[iter] = (times + 1) / 2
cat("End of iteration", iter,"\n")
}
tempAverI[i.g] = mean(num.I.overall)
}
AverI[round((r-r.start)/r.step)+1, round((R0-R0.start)/R0.step)+1] = mean(tempAverI)
cat("End of","r", r, "R0", R0, "\n")
time.end <- Sys.time()
cat("Accumulative time used is" , time.end - time.begin, "\n")
cat(mean(tempAverI), "\n")
}
sheet.name <- paste("r", r, sep = "_")
# write.xlsx(AverI, 'Data_Infect_Move.xlsx', sheetName = sheet.name, col.names = TRUE,
#            row.names = TRUE, append = TRUE, showNA = FALSE)
}
}
{
r.start <- 0.17
r.end <- 0.2
r.step <- 0.01
R0.start <- 1.4
R0.end <- 1.4
R0.step <- 0.2
r.range <- seq(r.start, r.end, r.step)
R0.range <- seq(R0.start, R0.end, R0.step)
AverI <- matrix(nrow = length(r.range), ncol = length(R0.range))
time.begin <- Sys.time()
for (r in r.range)
# foreach (r = r.range) %dopar%
{
for (R0 in R0.range)
{
##################################
#r = 0.088
# R0 = 1
num = 100  # Number of nodes
beta = 2 * R0   # Infection rate
delta = 2  # Recovery rate
##################################
set.seed(2020)
# set.seed(714)
iter.graph.num = 1
tempAverI <- numeric(iter.graph.num)
for (i.g in 1:iter.graph.num)
{
g1 <- sample_grg(num, r, coords = TRUE)
g9 = g8 = g7 = g6 = g5 = g4 = g3 = g2 = g1
V(g2)$x <- V(g1)$x - 1
V(g2)$y <- V(g1)$y + 1
V(g3)$x <- V(g1)$x
V(g3)$y <- V(g1)$y + 1
V(g4)$x <- V(g1)$x + 1
V(g4)$y <- V(g1)$y + 1
V(g5)$x <- V(g1)$x - 1
V(g5)$y <- V(g1)$y
V(g6)$x <- V(g1)$x + 1
V(g6)$y <- V(g1)$y
V(g7)$x <- V(g1)$x - 1
V(g7)$y <- V(g1)$y - 1
V(g8)$x <- V(g1)$x
V(g8)$y <- V(g1)$y - 1
V(g9)$x <- V(g1)$x + 1
V(g9)$y <- V(g1)$y - 1
g <- g1 + g2 + g3 + g4 + g5 + g6 + g7 + g8 + g9
### Connect the points on the boundary
id <- which((((V(g)$x > -r & V(g)$x < r)|(V(g)$x > 1-r & V(g)$x < 1+r))
& (V(g)$y > -r & V(g)$y < 1+r))
| (((V(g)$y > -r & V(g)$y < r)|(V(g)$y > 1-r & V(g)$y < 1+r)))
& (V(g)$x > -r & V(g)$x < 1+r))
id_1 <- sum(V(g)[id] <= num)
for (i in 1:id_1)
{
for (j in (id_1+1):length(id))
{
if (get.dist(V(g)[id[i]]$x - V(g)[id[j]]$x,
V(g)[id[i]]$y - V(g)[id[j]]$y) <= r)
{
g <- g %>% add_edges(c(id[i], id[j]))
}
}
}
temp.data <- as_data_frame(g, what = "both")
temp.edges <- unique(t(apply((temp.data$edges-1)%%num+1, 1, sort)))
temp.data$edges <- list(from = temp.edges[, 1], to = temp.edges[, 2])
g0 <- g1
for (i in (length(E(g0))+1) : length(temp.data$edges$from))
{
g0 <- g0 %>% add_edges(c(temp.data$edges$from[i], temp.data$edges$to[i]))
}
### Simulation
# iter.num = 50
iter.num = 8
num.I.overall <- numeric(iter.num)
# set.seed(2021)
set.seed(714)
for (iter in 1:iter.num) {
temp.g <- g0
p1 <- 0.01
p2 <- 0.9
# number of points moving
pt.n <- round(p1/(1+p1-p2)*num)
pt.move <- sample(num, pt.n)
pt.still <- 1:num
pt.still <- pt.still[!pt.still %in% pt.move]
S <- as.numeric(V(g0))
I <- sample(1:num, 1)
S <- S[S != I]
R <- numeric(length = 0)
times = 0
while (is.null(I) == FALSE)
{
a <- beta * length(E(g0)[S %--% I])
b <- delta * length(I)
if(a+b == 0) break
time.int <- rexp(1, a+b) * 160
while (time.int > 0)
{
pt.mtos <- choosep(pt.move, 1-p2)
pt.stom <- choosep(pt.still, p1)
pt.move <- pt.move[!pt.move %in% pt.mtos]
pt.move <- append(pt.move, pt.stom)
pt.still <- pt.still[!pt.still %in% pt.stom]
pt.still <- append(pt.still, pt.mtos)
# pt.move.rec <- append(pt.move.rec, pt.move)
for (j in pt.move) {
temp.g <- move.noedge(temp.g, j)
}
time.int <- time.int - runif(1, 0.8, 1.2)
}
pt.mtos <- choosep(pt.move, 1-p2)
pt.stom <- choosep(pt.still, p1)
pt.move <- pt.move[!pt.move %in% pt.mtos]
pt.move <- append(pt.move, pt.stom)
temp.g <- move(temp.g, pt.move, R)
### If only edges between S and I are needed
### Comment the above line and use the line below
# temp.g <- move.simple(temp.g, pt.move, S, I)
### New graph after points moving has been obtained ###
event <- sample(c(0, 1), size = 1, prob = c( a/(a+b), b/(a+b)))
### Infection
if(event == 0)
{
temp.infect.list <- ends(g0, E(g0)[.inc(I)])[!ends(g0, E(g0)[.inc(I)]) %in% I]
temp.infect.list <- temp.infect.list[!temp.infect.list %in% R]
if (length(temp.infect.list) == 1){
temp.infect <- temp.infect.list
}
else {
temp.infect <- sample(temp.infect.list, 1)
}
I <- append(I, temp.infect)
S <- S[S != temp.infect]
}
### Recovery
if(event == 1)
{
if (length(I) == 1) temp.recover = I
else temp.recover <- sample(I, 1)
I <- I[I != temp.recover]
R <- append(R, temp.recover)
}
# break
times = times + 1
}
num.I.overall[iter] = (times + 1) / 2
cat("End of iteration", iter,"\n")
}
tempAverI[i.g] = mean(num.I.overall)
}
AverI[round((r-r.start)/r.step)+1, round((R0-R0.start)/R0.step)+1] = mean(tempAverI)
cat("End of","r", r, "R0", R0, "\n")
time.end <- Sys.time()
cat("Accumulative time used is" , time.end - time.begin, "\n")
cat(mean(tempAverI), "\n")
}
sheet.name <- paste("r", r, sep = "_")
# write.xlsx(AverI, 'Data_Infect_Move.xlsx', sheetName = sheet.name, col.names = TRUE,
#            row.names = TRUE, append = TRUE, showNA = FALSE)
}
}
r.start <- 0.07
r.end <- 0.2
r.step <- 0.01
R0.start <- 0.2
R0.end <- 3.0
R0.step <- 0.2
r.range <- seq(r.start, r.end, r.step)
R0.range <- seq(R0.start, R0.end, R0.step)
AverI <- read.xlsx("Data_Infect_move.xlsx", 5, header = TRUE)[, -1]
AverI <- as.matrix(AverI)
fig <- plot_ly(
type = "contour",
x = R0.range,
y = r.range,
z = AverI,
# autocontour = TRUE,
contours = list(
end = 90,
size = 5,
start = 5,
coloring = 'heatmap',
showlabels = TRUE),
# line = list(smoothing = 0.9)
) %>% layout(xaxis = list(title = 'R_0'), yaxis = list(title = 'r'))
fig <- fig %>% colorbar(title = "Average \nProportion \n(%)")
fig
{
r.start <- 0.07
r.end <- 0.2
r.step <- 0.01
R0.start <- 0.2
R0.end <- 3.0
R0.step <- 0.2
r.range <- seq(r.start, r.end, r.step)
R0.range <- seq(R0.start, R0.end, R0.step)
AverI <- read.xlsx("Data_Infect_move.xlsx", 5, header = TRUE)[, -1]
AverI <- as.matrix(AverI)
# AverI <- as.matrix(AverI[seq(1, 27, 2), seq(1, 59, 2)]) # Try big steps
# contour(x = r.range, y = R0.range, AverI)
#
# fig <- plot_ly(
#   x = r.range,
#   y = R0.range,
#   z = AverI,
#   type = "contour"
# )
fig <- plot_ly(
type = "contour",
x = R0.range,
y = r.range,
z = AverI,
# autocontour = TRUE,
contours = list(
end = 90,
size = 5,
start = 5,
coloring = 'heatmap',
showlabels = TRUE),
# line = list(smoothing = 0.9)
) %>% layout(xaxis = list(title = 'R_0'), yaxis = list(title = 'r'))
fig <- fig %>% colorbar(title = "Average \nProportion \n(%)")
# fig <- fig %>% add_surface()
fig
}
{
r.start <- 0.07
r.end <- 0.2
r.step <- 0.01
R0.start <- 0.2
R0.end <- 3.0
R0.step <- 0.2
r.range <- seq(r.start, r.end, r.step)
R0.range <- seq(R0.start, R0.end, R0.step)
AverI <- read.xlsx("Data_Infect_move.xlsx", 5, header = TRUE)[, -1]
AverI <- as.matrix(AverI)
# AverI <- as.matrix(AverI[seq(1, 27, 2), seq(1, 59, 2)]) # Try big steps
# contour(x = r.range, y = R0.range, AverI)
#
# fig <- plot_ly(
#   x = r.range,
#   y = R0.range,
#   z = AverI,
#   type = "contour"
# )
fig <- plot_ly(
type = "contour",
x = R0.range,
y = r.range,
z = AverI,
# autocontour = TRUE,
contours = list(
end = 90,
size = 5,
start = 5,
coloring = 'heatmap',
showlabels = TRUE),
# line = list(smoothing = 0.9)
) %>% layout(xaxis = list(title = 'R_0'), yaxis = list(title = 'r'))
fig <- fig %>% colorbar(title = "Average \nProportion \n(%)")
# fig <- fig %>% add_surface()
fig
}
{
r.start <- 0.07
r.end <- 0.2
r.step <- 0.01
R0.start <- 0.2
R0.end <- 3.0
R0.step <- 0.2
r.range <- seq(r.start, r.end, r.step)
R0.range <- seq(R0.start, R0.end, R0.step)
AverI <- read.xlsx("Data_Infect_move.xlsx", 5, header = TRUE)[, -1]
AverI <- as.matrix(AverI)
# AverI <- as.matrix(AverI[seq(1, 27, 2), seq(1, 59, 2)]) # Try big steps
# contour(x = r.range, y = R0.range, AverI)
#
# fig <- plot_ly(
#   x = r.range,
#   y = R0.range,
#   z = AverI,
#   type = "contour"
# )
fig <- plot_ly(
type = "contour",
x = R0.range,
y = r.range,
z = AverI,
# autocontour = TRUE,
contours = list(
end = 90,
size = 5,
start = 5,
coloring = 'heatmap',
showlabels = TRUE),
# line = list(smoothing = 0.9)
) %>% layout(xaxis = list(title = 'R_0'), yaxis = list(title = 'r'))
fig <- fig %>% colorbar(title = "Average \nProportion \n(%)")
# fig <- fig %>% add_surface()
fig
}
{
r.start <- 0.07
r.end <- 0.2
r.step <- 0.01
R0.start <- 0.2
R0.end <- 3.0
R0.step <- 0.2
r.range <- seq(r.start, r.end, r.step)
R0.range <- seq(R0.start, R0.end, R0.step)
AverI <- read.xlsx("Data_Infect_move.xlsx", 5, header = TRUE)[, -1]
AverI <- as.matrix(AverI)
# AverI <- as.matrix(AverI[seq(1, 27, 2), seq(1, 59, 2)]) # Try big steps
# contour(x = r.range, y = R0.range, AverI)
#
# fig <- plot_ly(
#   x = r.range,
#   y = R0.range,
#   z = AverI,
#   type = "contour"
# )
fig <- plot_ly(
type = "contour",
x = R0.range,
y = r.range,
z = AverI,
# autocontour = TRUE,
contours = list(
end = 90,
size = 5,
start = 5,
coloring = 'heatmap',
showlabels = TRUE),
# line = list(smoothing = 0.9)
) %>% layout(xaxis = list(title = 'R_0'), yaxis = list(title = 'r'))
fig <- fig %>% colorbar(title = "Average \nProportion \n(%)")
# fig <- fig %>% add_surface()
fig
}
{
r.start <- 0.07
r.end <- 0.2
r.step <- 0.01
R0.start <- 0.2
R0.end <- 3.0
R0.step <- 0.2
r.range <- seq(r.start, r.end, r.step)
R0.range <- seq(R0.start, R0.end, R0.step)
AverI <- read.xlsx("Data_Infect_move.xlsx", 5, header = TRUE)[, -1]
AverI <- as.matrix(AverI)
# AverI <- as.matrix(AverI[seq(1, 27, 2), seq(1, 59, 2)]) # Try big steps
# contour(x = r.range, y = R0.range, AverI)
#
# fig <- plot_ly(
#   x = r.range,
#   y = R0.range,
#   z = AverI,
#   type = "contour"
# )
fig <- plot_ly(
type = "contour",
x = R0.range,
y = r.range,
z = AverI,
# autocontour = TRUE,
contours = list(
end = 90,
size = 5,
start = 5,
coloring = 'heatmap',
showlabels = TRUE),
# line = list(smoothing = 0.9)
) %>% layout(xaxis = list(title = 'R_0'), yaxis = list(title = 'r'))
fig <- fig %>% colorbar(title = "Average \nProportion \n(%)")
# fig <- fig %>% add_surface()
fig
}
{
r.start <- 0.07
r.end <- 0.2
r.step <- 0.01
R0.start <- 0.2
R0.end <- 3.0
R0.step <- 0.2
r.range <- seq(r.start, r.end, r.step)
R0.range <- seq(R0.start, R0.end, R0.step)
AverI <- read.xlsx("Data_Infect_move.xlsx", 5, header = TRUE)[, -1]
AverI <- as.matrix(AverI)
# AverI <- as.matrix(AverI[seq(1, 27, 2), seq(1, 59, 2)]) # Try big steps
# contour(x = r.range, y = R0.range, AverI)
#
# fig <- plot_ly(
#   x = r.range,
#   y = R0.range,
#   z = AverI,
#   type = "contour"
# )
fig <- plot_ly(
type = "contour",
x = R0.range,
y = r.range,
z = AverI,
# autocontour = TRUE,
contours = list(
end = 90,
size = 5,
start = 5,
coloring = 'heatmap',
showlabels = TRUE),
# line = list(smoothing = 0.9)
) %>% layout(xaxis = list(title = 'R_0'), yaxis = list(title = 'r'))
fig <- fig %>% colorbar(title = "Average \nProportion \n(%)")
# fig <- fig %>% add_surface()
fig
}
{
r.start <- 0.07
r.end <- 0.2
r.step <- 0.01
R0.start <- 0.2
R0.end <- 3.0
R0.step <- 0.2
r.range <- seq(r.start, r.end, r.step)
R0.range <- seq(R0.start, R0.end, R0.step)
AverI <- read.xlsx("Data_Infect_move.xlsx", 5, header = TRUE)[, -1]
AverI <- as.matrix(AverI)
# AverI <- as.matrix(AverI[seq(1, 27, 2), seq(1, 59, 2)]) # Try big steps
# contour(x = r.range, y = R0.range, AverI)
#
# fig <- plot_ly(
#   x = r.range,
#   y = R0.range,
#   z = AverI,
#   type = "contour"
# )
fig <- plot_ly(
type = "contour",
x = R0.range,
y = r.range,
z = AverI,
# autocontour = TRUE,
contours = list(
end = 90,
size = 5,
start = 5,
coloring = 'heatmap',
showlabels = TRUE),
# line = list(smoothing = 0.9)
) %>% layout(xaxis = list(title = 'R0'), yaxis = list(title = 'r'))
fig <- fig %>% colorbar(title = "Average \nProportion \n(%)")
# fig <- fig %>% add_surface()
fig
}
library(plotly)
